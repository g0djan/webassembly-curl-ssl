diff --git a/crypto/bio/bss_log.c b/crypto/bio/bss_log.c
index f2c84606d2..a90aebe0b4 100644
--- a/crypto/bio/bss_log.c
+++ b/crypto/bio/bss_log.c
@@ -24,6 +24,8 @@
 
 #if defined(OPENSSL_SYS_WINCE)
 #elif defined(OPENSSL_SYS_WIN32)
+#elif defined(__wasi__)
+# define NO_SYSLOG
 #elif defined(OPENSSL_SYS_VMS)
 # include <opcdef.h>
 # include <descrip.h>
diff --git a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
index d3e156700a..ed244048e0 100644
--- a/crypto/rand/rand_lib.c
+++ b/crypto/rand/rand_lib.c
@@ -333,6 +333,10 @@ const RAND_METHOD *RAND_get_rand_method(void)
 int RAND_priv_bytes_ex(OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num,
                        unsigned int strength)
 {
+#ifdef __wasi__
+    arc4random_buf(buf, num);
+    return 1;
+#endif
     EVP_RAND_CTX *rand;
 #if !defined(OPENSSL_NO_DEPRECATED_3_0) && !defined(FIPS_MODULE)
     const RAND_METHOD *meth = RAND_get_rand_method();
@@ -362,6 +366,10 @@ int RAND_priv_bytes(unsigned char *buf, int num)
 int RAND_bytes_ex(OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num,
                   unsigned int strength)
 {
+#ifdef __wasi__
+    arc4random_buf(buf, num);
+    return 1;
+#endif
     EVP_RAND_CTX *rand;
 #if !defined(OPENSSL_NO_DEPRECATED_3_0) && !defined(FIPS_MODULE)
     const RAND_METHOD *meth = RAND_get_rand_method();
diff --git a/engines/e_afalg.c b/engines/e_afalg.c
index c0189951e6..9911f79c7f 100644
--- a/engines/e_afalg.c
+++ b/engines/e_afalg.c
@@ -24,11 +24,17 @@
 #include "internal/nelem.h"
 
 #include <sys/socket.h>
-#include <linux/version.h>
+
+#ifdef __wasi__
+# define KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) 0
+#else
+# include <linux/version.h>
+#endif
+
 #define K_MAJ   4
 #define K_MIN1  1
 #define K_MIN2  0
-#if LINUX_VERSION_CODE < KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \
+#if !defined(__wasi__) || LINUX_VERSION_CODE < KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \
     !defined(AF_ALG)
 # ifndef PEDANTIC
 #  warning "AFALG ENGINE requires Kernel Headers >= 4.1.0"
diff --git a/providers/implementations/rands/seeding/rand_unix.c b/providers/implementations/rands/seeding/rand_unix.c
index 2aae396f23..a6d246ad23 100644
--- a/providers/implementations/rands/seeding/rand_unix.c
+++ b/providers/implementations/rands/seeding/rand_unix.c
@@ -395,6 +395,10 @@ static ssize_t syscall_random(void *buf, size_t buflen)
 #  elif (defined(__DragonFly__)  && __DragonFly_version >= 500700) \
      || (defined(__NetBSD__) && __NetBSD_Version >= 1000000000)
     return getrandom(buf, buflen, 0);
+#  elif defined(__wasi__)
+    if (getentropy(buf, buflen) == 0)
+      return (ssize_t)buflen;
+    return -1;
 #  else
     errno = ENOSYS;
     return -1;
